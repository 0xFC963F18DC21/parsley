package parsley

import parsley.ExpressionParser._
import parsley.Combinator._

/** This class is used to generate efficient expression parsers given a table of operators
  * in operator of operator precedence and an atomic value that represents the smallest
  * part of the expression. Caters to unary and binary operators of different associativities.
  * @param table A table of operators. Table is ordered highest precedence to lowest precedence.
  *              Each list in the table corresponds to operators of the same precedence level.
  * @param atom The smallest unchainable unit of the expression, for instance numbers/variables
  */
class ExpressionParser[A](table: List[OpList[A]], atom: =>Parsley[A])
{
    private def convertOperator(opList: OpList[A]): Parsley[A] => Parsley[A] = opList match
    {
        case Infixes(ops, assoc) => assoc match
        {
            case AssocLeft => chainl1(_, choice(ops))
            case AssocRight => chainr1(_, choice(ops))
        }
        case Prefixes(ops) => chainPre(_, choice(ops))
        case Postfixes(ops) => chainPost(_, choice(ops))
    }

    /** The expression parser generated by this generator. */
    lazy val expr: Parsley[A] = table.map(convertOperator).foldLeft(atom)((p, op) => op(p))
}

object ExpressionParser
{
    sealed trait Assoc
    case object AssocLeft extends Assoc
    case object AssocRight extends Assoc

    sealed trait OpList[A]
    case class Infixes[A](op: List[Parsley[A => A => A]], assoc: Assoc) extends OpList[A]
    case class Prefixes[A](op: List[Parsley[A => A]]) extends OpList[A]
    case class Postfixes[A](op: List[Parsley[A => A]]) extends OpList[A]
}